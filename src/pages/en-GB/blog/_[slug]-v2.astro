---
import { type CollectionEntry, getCollection } from 'astro:content';

import BlogPost from '../../../layouts/BlogPost.astro';

import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from "astro";

import { render } from 'astro:content';


export async function getStaticPaths() {
	const posts = [...(await getCollection('blog'))];
/*
  const sortedPosts = posts.sort(
    (a, b) => b.data.pubDate() - a.data.pubDate(),
  );

  return paginate(sortedPosts, { pagesize: 12 });
}
*/
  return posts.map((post) => {
    return {
      // { params: { /* required */ }, props: { /* optional */ } }
      params: { slug: post.id },
 //       languages,                       // en-GB, nl-NL 
  //      slug: slugParts.join('/'),
   //   },                 
      props: post, 
    } satisfies GetStaticPaths;

type Props = [
  CollectionEntry<'blog'>, 
  InferGetStaticPropsType<typeof getStaticPaths>
  ];

type Params = InferGetStaticParamsType<typeof getStaticPaths>;


const { languages, slugParts } = Astro.params;

const { Content } = await render(post);
---

<BlogPost {...post.data}>
	<Content />
</BlogPost>